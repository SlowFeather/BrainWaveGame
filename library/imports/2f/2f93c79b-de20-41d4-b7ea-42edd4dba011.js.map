{"version":3,"sources":["assets\\scripts\\Manager\\MessageDispatcher\\MessageDispatcher.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["/**\n* MessageDispatcher\n* @ author: SlowFeather 参考 https://github.com/wyb10a10/cocos_creator_framework\n* @ email: slowfeather@163.com\n* @ data: 2020-09-08 16:04\n*/\nconst {ccclass, property} = cc._decorator;\n\n//#region MessageHelper\nexport type EventManagerCallFunc = (eventName: string, eventData: any) => void;\ninterface CallBackTarget {\n    callBack: EventManagerCallFunc,\n    target: any,\n}\n//#endregion\n\n@ccclass\nexport default class MessageDispatcher extends cc.Component {\n\n//#region \n    public static Instance: MessageDispatcher;\n    constructor() { super(); }\n    onLoad():void{\n        MessageDispatcher.Instance=this;\n    }\n//#endregion\n    \n    /**\n     * 消息列表\n     *\n     * @private\n     * @type {{ [key: string]: CallBackTarget[] }}\n     * @memberof MessageDispatcher\n     */\n    private _eventListeners: { [key: string]: CallBackTarget[] } = {};\n\n    /**\n     *\n     * 添加全局监听\n     * @param {string} name 消息名称\n     * @param {(param?: any) => void} callBack 触发回调\n     * @param {*} target this\n     * @param {number} [weight=0] 0\n     * @memberof LocalMessager\n     */\n    AddEventListener(name: string, callBack: (param?: any) => void, target: any, weight: number = 0) {\n        //消息名不能为空\n        if (!name) {\n            cc.warn(\"eventName is empty\" + name);\n            return;\n        }\n        //事件不能为空\n        if (null == callBack) {\n            cc.log('addEventListener callBack is nil');\n            return false;\n        }\n        let callTarget: CallBackTarget = { callBack: callBack, target: target };\n        if (null == this._eventListeners[name]) {\n            this._eventListeners[name] = [callTarget];\n\n        } else {\n            let index = this.getEventListenersIndex(name, callBack, target);\n            if (-1 == index) {\n                this._eventListeners[name].push(callTarget);\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * 发送全局消息\n     *\n     * @param {string} name 消息名称\n     * @param {*} [param] 参数\n     * @memberof LocalMessager\n     */\n    Dispatch(name: string, param?: any) {\n\n        //console.log(`==================== raiseEvent ${name} begin | ${JSON.stringify(param)}`);\n        if (null != this._eventListeners[name]) {\n            // 将所有回调提取出来，再调用，避免调用回调的时候操作了事件的删除\n            let callbackList: CallBackTarget[] = [];\n            for (const iterator of this._eventListeners[name]) {\n                callbackList.push({ callBack: iterator.callBack, target: iterator.target });\n            }\n            for (const iterator of callbackList) {\n                iterator.callBack.call(iterator.target, param, name);\n                //iterator.callBack.call(iterator.target, name, param);\n                \n            }\n        }\n        //console.log(`==================== raiseEvent ${name} end`);\n    }\n    /**\n     * 移除全局消息\n     *\n     * @param {string} name 消息名称\n     * @param {(param?: any) => void} callBack 消息回调\n     * @param {*} target\n     * @memberof LocalMessager\n     */\n    RemoveEventListener(name: string, callBack: (param?: any) => void, target: any) {\n        if (null != this._eventListeners[name]) {\n            let index = this.getEventListenersIndex(name, callBack, target);\n            if (-1 != index) {\n                this._eventListeners[name].splice(index, 1);\n            }\n        }\n    }\n    private SetEventListener(eventName: string, callBack: EventManagerCallFunc, target?: any): boolean {\n        if (!eventName) {\n            cc.warn(\"eventName is empty\" + eventName);\n            return;\n        }\n\n        if (null == callBack) {\n            cc.log('setEventListener callBack is nil');\n            return false;\n        }\n        let callTarget: CallBackTarget = { callBack: callBack, target: target };\n        this._eventListeners[eventName] = [callTarget];\n        return true;\n    }\n\n    private getEventListenersIndex(eventName: string, callBack: EventManagerCallFunc, target?: any): number {\n        let index = -1;\n        for (let i = 0; i < this._eventListeners[eventName].length; i++) {\n            let iterator = this._eventListeners[eventName][i];\n            if (iterator.callBack == callBack && (!target || iterator.target == target)) {\n                index = i;\n                break;\n            }\n        }\n        return index;\n    }\n    \n    onDestroy() {\n        \n    }\n}"]}