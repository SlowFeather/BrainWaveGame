{"version":3,"sources":["assets\\scripts\\Manager\\DriveManager\\DriveManager.ts"],"names":[],"mappings":"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","file":"","sourceRoot":"/","sourcesContent":["import { MessageDef } from \"../../Def/MessageDef\";\nimport { HttpUtil } from \"../../Tools/HTTPUtil\";\nimport MessageDispatcher from \"../MessageDispatcher/MessageDispatcher\";\n\nconst {ccclass, property} = cc._decorator;\n\n@ccclass\nexport default class DriveManager extends cc.Component {\n\n//#region Instance\n    public static Instance: DriveManager;\n    constructor() { super(); }\n    onLoad():void{\n        DriveManager.Instance=this;\n    }\n//#endregion\n\n\n\n\n    host:string=\"http://127.0.0.1:8090\"; \n    param:any={\"ty\":\"brain\"};\n\n    \n    // host:string=\"http://127.0.0.1:1111/hello.php\";\n    // param:any={\"id\":\"yingxiangshijie\"};\n\n\n\n    /**\n     * 是否是连接状态\n     *\n     * @type {boolean}\n     * @memberof DriveManager\n     */\n    connected:boolean=false;\n\n    /**\n     * 数据类\n     *\n     * @type {BrainModel}\n     * @memberof DriveManager\n     */\n    brainModel:BrainModel=null;\n\n    /**\n     * 脑机断开回调\n     *\n     * @type {Function}\n     * @memberof DriveManager\n     */\n    OnBrainBlockEvent:Function=null;\n\n    /**\n     * 脑机连接回调\n     *\n     * @type {Function}\n     * @memberof DriveManager\n     */\n    OnBrainConnectEvent:Function=null;\n\n\n    /**\n     * 当脑机值改变的时候\n     *\n     * @type {Function}\n     * @memberof DriveManager\n     */\n    OnBrainValueChangeEvent:Function=null;\n\n\n    /**\n     * 当设备持续断开的时候不断调用\n     *\n     * @type {Function}\n     * @memberof DriveManager\n     */\n    OnBrainNotConnectEvent:Function=null;\n\n\n    start () {\n        //this.PinHost();\n    }\n\n    GetHandler(b:boolean,response:string){\n        \n        if (b) {\n            if (!this.connected) {\n                \n                //第一次进需要触发\n                this.connected=true;\n                console.log(\"设备连接\");\n\n                let br=JSON.parse(response)as BrainModel;\n                this.brainModel=br;\n\n                MessageDispatcher.Instance.Dispatch(MessageDef.BrainConnectMessage);\n                MessageDispatcher.Instance.Dispatch(MessageDef.BrainValueChangeMessage,this.brainModel);\n\n                \n                if (this.OnBrainConnectEvent) {\n                    this.OnBrainConnectEvent();\n                }\n                if (this.OnBrainValueChangeEvent) {\n                    this.OnBrainValueChangeEvent();\n                }\n                \n                return;\n            }\n\n            //console.log(response);\n            let br=JSON.parse(response)as BrainModel;\n            this.brainModel=br;\n            if (this.OnBrainValueChangeEvent) {\n                this.OnBrainValueChangeEvent();\n            }\n            \n            MessageDispatcher.Instance.Dispatch(MessageDef.BrainValueChangeMessage,this.brainModel);\n            // console.log(\"-->\"+this.brainModel.brain[0].Delta);\n            // console.dir(this.brainModel.brain[0]);\n        }else{\n            \n            if (this.connected) {\n                //第一次进需要触发\n                console.log(\"设备断开\");\n                this.connected=false;\n                this.brainModel=null;\n                MessageDispatcher.Instance.Dispatch(MessageDef.BrainBlockMessage);\n                if (this.OnBrainBlockEvent) {\n                    this.OnBrainBlockEvent();\n                }\n            }else{\n                this.brainModel=null;\n                console.log(\"设备持续断开\");\n\n                MessageDispatcher.Instance.Dispatch(MessageDef.BrainBlockMessage);\n\n                if (this.OnBrainNotConnectEvent) {\n                    this.OnBrainNotConnectEvent();\n                }\n            }\n        }\n    }\n\n    pinging:boolean=false;\n    StartPinDrive(){\n        this.pinging=true;\n        this.timer=0;\n\n    }\n\n    StopPingDrive(){\n        this.pinging=false;\n        this.timer=0;\n    }\n    timer:number=0;\n    update (dt) {\n        if (this.pinging) {\n            this.timer+=dt;\n            if (this.timer>=1) {\n                this.timer=0;\n                 //尝试pin主机\n                this.PinHost();\n            }\n        }\n    }\n\n    PinHost(){\n        HttpUtil.GET(this.host,this.param,this.GetHandler.bind(this))\n    }\n}\n\n\n/*Brain*/\nexport class Brain {\n    Delta: string;\n    Theta: string;\n    LowAlpha: string;\n    HighAlpha: string;\n    LowBeta: string;\n    HighBeta: string;\n    LowGamma: string;\n    HighGamma: string;\n    Relaxation: string;\n    Concentration: string;\n  }\n  \n  /*BrainModel*/\n  export class BrainModel {\n    brain: Brain[];\n  }\n  "]}