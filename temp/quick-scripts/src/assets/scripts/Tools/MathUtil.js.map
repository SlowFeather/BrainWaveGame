{"version":3,"sources":["assets\\scripts\\Tools\\MathUtil.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAM,IAAA,kBAGW,EAFb,oBAAO,EACP,sBACa,CAAC;AAClB;;;;;GAKG;AAEH;IAAA;IA2EA,CAAC;IAxEG;;;;;;;;;OASG;IACW,uBAAc,GAA5B,UAA6B,GAAW,EAAE,GAAW;QACjD,OAAO,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,GAAG,GAAG,GAAG,GAAG,CAAC,CAAC,CAAC,CAAC;IAC7D,CAAC;IAED;;;;;OAKG;IACW,0BAAiB,GAA/B,UAAgC,KAAK,EAAE,KAAK;QACxC,OAAO,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,KAAK,CAAC;IACnD,CAAC;IAGD;;;;;OAKG;IACW,eAAM,GAApB,UAAqB,KAAK,EAAE,KAAK;QAC7B,KAAK;QACL,OAAO,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,KAAK,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;IACzD,CAAC;IAED;;;;;;;;OAQG;IACW,uBAAc,GAA5B,UAA6B,EAAW,EAAE,EAAW;QACjD,IAAI,CAAC,GAAW,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,GAAG,EAAE,CAAC;QACjC,OAAO,CAAC,CAAC;IACb,CAAC;IAED;;;;;;;;;;;OAWG;IACW,cAAK,GAAnB,UAAoB,GAAU,EAAC,CAAQ,EAAC,CAAQ,EAAC,CAAQ,EAAC,CAAQ;QAC9D,IAAI,MAAM,GAAC,CAAC,CAAC;QACb,MAAM;QACN,IAAI,UAAU,GAAC,IAAI,CAAC,GAAG,CAAC,GAAG,GAAC,CAAC,CAAC,GAAC,CAAC,CAAC,CAAC,CAAC;QACnC,IAAI,OAAO,GAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAC,CAAC,CAAC,GAAC,UAAU,CAAC,CAAC;QACvC,QAAQ;QACR,MAAM,GAAC,CAAC,GAAC,OAAO,CAAC;QACjB,OAAO,MAAM,CAAC;IAClB,CAAC;IAzEgB,QAAQ;QAD5B,OAAO;OACa,QAAQ,CA2E5B;IAAD,eAAC;CA3ED,AA2EC,IAAA;kBA3EoB,QAAQ","file":"","sourceRoot":"/","sourcesContent":["const {\n    ccclass,\n    property\n} = cc._decorator;\n/**\n * MathUtil\n * @ author: SlowFeather\n * @ wechat: BackedByTheWT\n * @ data: 2020-07-06 10:31\n */\n@ccclass\nexport default class MathUtil {\n\n\n    /**\n     * 得到一个int随机数\n     * 包括上限和下限\n     *\n     * @static\n     * @param {number} min\n     * @param {number} max\n     * @returns {number}\n     * @memberof MathUtil\n     */\n    public static randomInterger(min: number, max: number): number {\n        return min + Math.floor(Math.random() * (max - min + 1));\n    }\n\n    /**\n     * 产生随机数，包含下限值，但不包括上限值\n     * @param {Number} lower 下限\n     * @param {Number} upper 上限\n     * @return {Number} 返回在下限到上限之间的一个随机数\n     */\n    public static randomExceptUpper(lower, upper) {\n        return Math.random() * (upper - lower) + lower;\n    }\n\n\n    /**\n     * 产生随机数，包含下限值，包括上限值\n     * @param {Number} lower 下限\n     * @param {Number} upper 上限\n     * @return {Number} 返回在下限到上限之间的一个随机数\n     */\n    public static random(lower, upper) {\n        //0-1\n        return (Math.random() * (upper - lower + 1)) + lower;\n    }\n\n    /**\n     * 得到两点间的距离\n     *\n     * @static\n     * @param {cc.Vec2} p1\n     * @param {cc.Vec2} p2\n     * @returns {number}\n     * @memberof MathUtil\n     */\n    public static getDisOfTwoPos(p1: cc.Vec2, p2: cc.Vec2): number {\n        let l: number = p1.sub(p2).mag();\n        return l;\n    }\n\n    /**\n     * 区间映射\n     *\n     * @static\n     * @param {number} num 需要映射的值\n     * @param {number} x 最小值\n     * @param {number} y 最大值\n     * @param {number} a 映射后最小值\n     * @param {number} b 映射后最大值\n     * @return {*}  {number} 映射后的值\n     * @memberof MathUtil\n     */\n    public static reMap(num:number,x:number,y:number,a:number,b:number): number {\n        let result=0;\n        //算出比例\n        let proportion=Math.abs(num/(y-x));\n        let mapping=Math.abs((b-a)*proportion);\n        //映射到新区间\n        result=a+mapping;\n        return result;\n    }\n\n}"]}