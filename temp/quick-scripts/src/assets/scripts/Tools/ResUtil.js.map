{"version":3,"sources":["assets\\scripts\\Tools\\ResUtil.ts"],"names":[],"mappings":";;;;;;AAAA,6CAA4C;AAE5C;IAAA;IAmEA,CAAC;IA3DiB,kBAAU,GAAxB,UAAyB,UAAkB,EAAE,OAAkB;QAE3D,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE;YAC5C,IAAM,OAAO,GAAG,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;YACvC,IAAI,OAAO,CAAC,IAAI,IAAE,UAAU,EAAE;gBAC1B,OAAO,CAAC,MAAM,GAAC,IAAI,CAAC;gBACpB,IAAI,OAAO,EAAE;oBACT,OAAO,CAAC,OAAO,CAAC,CAAC;iBACpB;gBACD,OAAO;aACV;SACJ;QAED,oCAAoC;QACpC,IAAI,IAAI,GAAE,EAAE,CAAC,WAAW,CAAC,OAAO,CAAC,aAAa,CAAC,UAAU,CAAC,CAAuB,CAAC;QAClF,IAAI,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,EAAE,CAAC,cAAc,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;QAClF,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAA;QACrB,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAC1B,IAAI,OAAO,EAAE;YACT,OAAO,CAAC,IAAI,CAAC,CAAC;SACjB;QAGD,wDAAwD;QACxD,iBAAiB;QACjB,8BAA8B;QAC9B,kBAAkB;QAClB,QAAQ;QACR,qBAAqB;QACrB,2BAA2B;QAC3B,QAAQ;QACR,MAAM;IACV,CAAC;IAEa,qBAAa,GAA3B,UAA4B,IAAY,EAAE,OAAO;QAC7C,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,SAAS,EAAE,UAAC,GAAG,EAAE,SAAS;YACjD,IAAI,GAAG,EAAE;gBACL,OAAO,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;gBACnB,OAAO;aACV;YACD,IAAI,OAAO,EAAE;gBACT,OAAO,CAAC,SAAS,CAAC,CAAC;aACtB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAGa,eAAO,GAArB,UAAsB,OAAe,EAAE,OAAO;QAC1C,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,OAAO,EAAE,UAAU,GAAG,EAAE,MAAM;YAE/C,IAAI,OAAO,EAAE;gBACT,OAAO,CAAC,MAAM,CAAC,CAAC;aACnB;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IACa,kBAAU,GAAxB,UAAyB,GAAG;QACxB,EAAE,CAAC,MAAM,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC;IAChC,CAAC;IA/DD,iBAAiB;IACH,qBAAa,GAAgC,EAAE,CAAA;IAE/C,kBAAU,GAAiB,IAAI,WAAI,EAAW,CAAC;IA8DjE,cAAC;CAnED,AAmEC,IAAA;kBAnEoB,OAAO","file":"","sourceRoot":"/","sourcesContent":["import { List } from \"./DataStructure/List\";\n\nexport default class ResUtil {\n    \n    // public static \n    public static ResDictionary: { [key: string]: cc.Asset } = {} \n\n    public static prefabList:List<cc.Node> = new List<cc.Node>();\n\n\n    public static LoadPrefab(prefabname: string, callfun?: Function) {\n\n        for (let i = 0; i < this.prefabList.Count; i++) {\n            const element = this.prefabList.Get(i);\n            if (element.name==prefabname) {\n                element.active=true;\n                if (callfun) {\n                    callfun(element);\n                }\n                return;\n            }\n        }\n\n        //直接加载 这里的unknow是因为vscode识别不出来是个node\n        let node =cc.instantiate(ResUtil.ResDictionary[prefabname]) as unknown as cc.Node;\n        let scene = cc.director.getScene().getChildByName(\"Game\").getChildByName(\"Scene\");\n        node.setParent(scene)\n        this.prefabList.Add(node);\n        if (callfun) {\n            callfun(node);\n        }\n\n\n        // cc.loader.loadRes(path, cc.Prefab, (err, prefab) => {\n        //     if (err) {\n        //         console.error(err);\n        //         return;\n        //     }\n        //     if (callfun) {\n        //         callfun(prefab);\n        //     }\n        // });\n    }\n\n    public static LoadAudioClip(path: string, callfun) {\n        cc.loader.loadRes(path, cc.AudioClip, (err, audioclip) => {\n            if (err) {\n                console.error(err);\n                return;\n            }\n            if (callfun) {\n                callfun(audioclip);\n            }\n        });\n    }\n\n\n    public static LoadDir(dirpath: string, callfun){\n        cc.loader.loadResDir(dirpath, function (err, assets) {\n            \n            if (callfun) {\n                callfun(assets);\n            }\n        });\n    }\n    public static ReleaseRes(res){\n        cc.loader.releaseAsset(res);\n    }\n\n}"]}